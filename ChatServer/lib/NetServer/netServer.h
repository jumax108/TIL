#pragma once

#include <WinSock2.h>
#pragma comment(lib,"ws2_32")
#include <WS2tcpip.h>
#include <stdexcept>
#include <thread>
#include <new>
#include <windows.h>
#include <crtdbg.h>
#include <DbgHelp.h>


#include <stack>


#include "../common/dump.h"
#include "../common/log.h"
#include "../common/SimpleProfiler.h"
#include "../common/ObjectFreeListTLS.h"
#include "../common/stack.h"
#include "../common/stringParser.h"
#include "../common/ringBuffer.h"
#include "../common/protocolBuffer.h"
#include "../common/lockFreeQueue.h"
#include "../common/lockFreeStack.h"
#include "common.h"
#include "packetPtr_NetServer.h"

constexpr int MTU = 1500;
constexpr int PROTOCOL_HEADER_SIZE = 44;
constexpr int MSS = MTU - PROTOCOL_HEADER_SIZE;

extern SimpleProfiler sp;

extern CDump dump;

#define MAX_PACKET 500

class CChatServer;

class CNetServer{

	friend class CChatServer;

public:

	CNetServer();

	// 필요한 메모리를 할당하고 서버를 시작합니다.
	void start(const wchar_t* configFileName); 
	// 모든 메모리를 정리하고 서버를 종료합니다.
	void stop(); 
	
	// 현재 접속중인 세션 수를 반환합니다.
	unsigned __int64 getSessionCount();
	
	// sessionID 에 해당하는 연결 해제합니다.
	bool disconnect(unsigned __int64 sessionID); 
	// sessinoID 에 해당하는 세션에 데이터 전송합니다.
	bool sendPacketPostIOCP(unsigned __int64 sessionID, CPacketPtrNet packet);
	bool sendPacketPostSend(unsigned __int64 sessionID, CPacketPtrNet packet);
	 
	// 클라이언트가 접속을 시도한 상태에서 호출됩니다.
	// 반환된 값에 따라 연결을 허용합니다.
	// return true = 연결 후, 세션 초기화
	// return false = 연결을 끊음
	virtual bool onConnectRequest(unsigned int ip, unsigned short port) = 0;
	// 클라이언트가 접속을 완료한 상태에서 호출됩니다.
	virtual void onClientJoin(unsigned int ip, unsigned short port, unsigned __int64 sessionID) = 0;
	// 클라이언트의 연결이 해제되면 호출됩니다.
	virtual void onClientLeave(unsigned __int64 sessionID) = 0;

	// 클라이언트에게 데이터를 전송하면 호출됩니다.
	virtual void onRecv(unsigned __int64 sessionID, CPacketPtr pakcet) = 0;
	// 클라이언트에게서 데이터를 전달받으면 호출됩니다.
	virtual void onSend(unsigned __int64 sessionID, int sendSize) = 0;

	// 에러 상황에서 호출됩니다.
	virtual void onError(int errorCode, const wchar_t* errorMsg) = 0;

	// 서버 시작 중 에러가 발생하면 throw 됩니다.
	struct stStartError{
		int _errorCode;
		const wchar_t* _errorMessage;
		stStartError(int errorCode, const wchar_t* errorMessage){
			_errorCode = errorCode;
			_errorMessage = errorMessage;
		}
	};

	unsigned __int64 getRecvTPS();
	unsigned __int64 getSendTPS();
	unsigned __int64 getAcceptTPS();
	unsigned __int64 getAcceptTotal();
	
	// max packet num
	int maxPacketNum = 0;
protected:

	struct stSession{
		
		stSession(unsigned int sendBufferSize = 1, unsigned int recvBufferSize = 1):
			_recvBuffer(5000)
		{
			_sessionID = 0;
			_sock = NULL;
			_ip = 0;
			_port = 0;
			_isSent = false;
			_ioCnt = 0;
			_disconnect = false;
			ZeroMemory(&_sendOverlapped, sizeof(OVERLAPPED));
			ZeroMemory(&_recvOverlapped, sizeof(OVERLAPPED));
			_packets = (CPacketPtr*)malloc(sizeof(CPacketPtr) * MAX_PACKET);
			ZeroMemory(_packets, sizeof(CPacketPtr) * MAX_PACKET);
			_packetCnt = 0;

			_recvPosted = false;
		}

		~stSession(){
		}

		// ID의 하위 6바이트는 세션 메모리에 대한 재사용 횟수
		// 상위 2바이트는 세션 인덱스
		unsigned __int64 _sessionID; // 서버 가동 중에는 고유한 세션 ID
	
		SOCKET _sock;
	
		unsigned int _ip;
		unsigned short _port;

		CLockFreeQueue<CPacketPtr> _sendQueue;
		CRingBuffer _recvBuffer;
		
		// send를 1회로 제한하기 위한 플래그
		bool _isSent;
		
		// Disconnect가 호출됨, IO 취소 이후 IO 관련 작업 무시를 위함
		bool _disconnect;

		// 총 32비트로 릴리즈 플래그 변화와 ioCnt가 0인지 동시에 체크하기 위함
		alignas(32) bool _release;
		// 32비트 채우기 용 변수로 사용하지 않음
		private: char _temp = 0;
		// recv, send io가 요청되어 있는 횟수입니다.
		// recv는 항상 요청되어있기 때문에 ioCnt는 최소 1입니다.
		// ioCnt가 0이되면 연결이 끊긴 상태입니다.
		public: short _ioCnt; 

		// recv 함수 중복 호출 방지용
		bool _recvPosted;
		
		OVERLAPPED _sendOverlapped;
		OVERLAPPED _recvOverlapped;

		CPacketPtr* _packets;
		int _packetCnt;
	};

	stSession* _sessionArr;
	unsigned int _sessionNum;
	unsigned __int64 _sessionIndexMask;
	unsigned __int64 _sessionAllocCntMask;
public:
	int _sendBufferSize;
	int _recvBufferSize;

protected:
	HANDLE _acceptThread;
	int _workerThreadNum;
	HANDLE* _workerThread;
	SOCKET _listenSocket;

	alignas(64) CLockFreeStack<unsigned short>* _sessionIndexStack;
	unsigned int _sessionCnt;

	HANDLE _iocp;

	// free list에서 할당할 때 사용
	HANDLE _heap;

	// logger
	CLog log;

	// thread 정리용 event
	HANDLE _stopEvent;

	// 전체 accept 수
	alignas(64) unsigned int _acceptTotal;	
	unsigned int _acceptCnt;
	unsigned int _recvCnt;
	unsigned int _sendCnt;
	unsigned __int64 _sendBytes = 0;
	unsigned __int64 _recvBytes = 0;
	// recv TPS 측정용 변수
	alignas(64) unsigned int _recvTPS;
	// send TPS 측정용 변수
	unsigned int _sendTPS;
	// accept TPS 측정용 변수
	unsigned int _acceptTPS;

	unsigned int _maxSendQueCap = 0;
	unsigned int _maxRecvBufferCap = 0;

	// tps 처리용 스레드
	HANDLE _tpsThread;

	short _iocpQueueSize = 0;

	static unsigned __stdcall tpsFunc(void* args);

	void sendPost(stSession* session);
	void recvPost(stSession* session);

	static unsigned __stdcall completionStatusFunc(void* args);
	static unsigned __stdcall acceptFunc(void* args);

	void checkCompletePacket(stSession* session, CRingBuffer* recvBuffer);

	void release(unsigned __int64 sessionID);
};
